#name: Build and Deploy user-service
#
#on:
#  push:
#    branches: [ "main" ]
#    paths:
#      - "user-service/**"
#
#jobs:
#
#  ci:
#    name: CI - Build & Test
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: 17
#          distribution: 'temurin'
#
#      - name: Cache Gradle packages
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#
#      - name: Make application.yml
#        run: |
#          mkdir ./src/main/resources
#          touch ./src/main/resources/application.yml
#          echo "${{ secrets.APPLICATION_YML }}" >> ./src/main/resources/application.yml
#        shell: bash
#
#      - uses: actions/upload-artifact@v4
#        with:
#          name: application.yml
#          path: ./src/main/resources/application.yml
#
#      - name: Grant execute premission for gradlew
#        run: chmod +x gradlew
#
#      - name: Build with Gradle
#        run: ./gradlew clean build --exclude-task test
#
#      - name: Upload Build Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: build-artifact
#          path: build/lib/*.jar
#
#  cd:
#
##  build-and-deploy:
#    name: CD - Docker & Deploy
#    needs: ci
#    if: github.ref == 'refs/heads/main'
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#
##      - name: Set up JDK
##        uses: actions/setup-java@v3
##        with:
##          java-version: '17'
##          distribution: 'temurin'
##
##      - name: Build user-service JAR
##        run: ./gradlew :user-service:bootJar
#
#      - name: Download Build Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: build-artifact
#          path: build/libs
#
##      - name: Docker check
##        run: |
##          echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
#
#
#      - name: Login to Docker Hub
#        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
#
#      - name: Build Docker Image
#        run: docker build -f Dockerfile --build-arg JAR_FILE=${{ secrets.JAR_FILE }} --build-arg PORT=${{ secrets.DOCKERFILE_PORT }} -t ${{ secrets.DOCKER_HUB_REPO }} .
#
#      - name: Push Docker Image
#        run: docker push ${{ secrets.DOCKER_HUB_REPO }}
#
#
##      - name: Build Docker Image
##        run: |
##          docker build \
##            -f Dockerfile \
##            --build-arg JAR_FILE=${{ secrets.JAR_FILE }} \
##            --build-arg PORT=${{ secrets.DOCKERFILE_PORT }} \
##            -t ${{ secrets.DOCKER_HUB_REPO }} .
##          docker build \
##            -t your-dockerhub-id/user-service:latest \
##            -f user-service/Dockerfile \
##            user-service
#
##      - name: Login to DockerHub
##        uses: docker/login-action@v2
##        with:
##          username: ${{ secrets.DOCKER_USERNAME }}
##          password: ${{ secrets.DOCKER_PASSWORD }}
##
##      - name: Push Docker Image
##        run: docker push your-dockerhub-id/user-service:latest
#
#      - name: Deploy on EC2
#        uses: appleboy/ssh-action@v0.1.6
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ec2-user
#          key: ${{ secrets.EC2_SSH_KEY }}
#          script: |
#            docker pull qjatjr29/beomstory-user-service
#            docker stop user-service || true
#            docker rm user-service || true
#            docker run -d \
#              --name user-service \
#              -p 8081:8080 \
#              your-dockerhub-id/user-service:latest



name: Build and Deploy user-service

on:
  push:
    branches: [ "main" ]
    paths:
      - "user-service/**"

jobs:
  ci:
    name: CI - Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: user-service

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make application.yml
        run: |
          mkdir -p ./src/main/resources
          touch ./src/main/resources/application.yml
          echo "${{ secrets.USER_SERVICE_APPLICATION_YML }}" >> ./src/main/resources/application.yml
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x ../gradlew

      - name: Build with Gradle
        run: ../gradlew clean build --exclude-task test

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: user-service-jar
          path: build/libs/*.jar

  cd:
    name: CD - Docker & Deploy
    needs: ci
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: user-service-jar
          path: user-service/build/libs

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker Image
        run: docker build -f user-service/Dockerfile --build-arg JAR_FILE=${{ secrets.JAR_FILE }} --build-arg PORT=${{ secrets.DOCKERFILE_PORT }} -t ${{ secrets.DOCKER_HUB_REPO }}:${{ secrets.DOCKER_HUB_USER_SERVICE_TAG }} ./user-service

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_HUB_REPO }}:${{ secrets.DOCKER_HUB_USER_SERVICE_TAG }}

#      - name: Deploy on EC2
#        uses: appleboy/ssh-action@v0.1.6
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ec2-user
#          key: ${{ secrets.EC2_SSH_KEY }}
#          script: |
#            docker pull ${{ secrets.DOCKER_HUB_REPO }}
#            docker stop user-service || true
#            docker rm user-service || true
#            docker run -d \
#              --name user-service \
#              -p ${{ secrets.DOCKERFILE_PORT }}:${{ secrets.DOCKERFILE_PORT }} \
#              ${{ secrets.DOCKER_HUB_REPO }}