name: Build and Deploy image-service

on:
  push:
    branches: [ "main" ]
    paths:
      - "image-service/**"

jobs:
  ci:
    name: CI - Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: image-service

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make application.yml
        run: |
          mkdir -p ./src/main/resources
          touch ./src/main/resources/application.yml
          echo "${{ secrets.IMAGE_SERVICE_APPLICATION_YML }}" >> ./src/main/resources/application.yml
        shell: bash

      - name: Make image service schema.sql
        run: |
          mkdir -p ./src/main/resources
          touch ./src/main/resources/schema.sql
          echo "${{ secrets.IMAGE_SERVICE_SCHEMA_SQL }}" >> ./src/main/resources/schema.sql

      - name: Grant execute permission for gradlew
        run: chmod +x ../gradlew

      - name: Build common service with Gradle
        run: ../gradlew :common-service:build --exclude-task test

      - name: Build with Gradle
        run: ../gradlew :image-service:clean :image-service:build --exclude-task test

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-service-jar
          path: image-service/build/libs/*.jar

  cd:
    name: CD - Docker & Deploy
    needs: ci
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: image-service-jar
          path: image-service/build/libs

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker Image
        run: |
          docker build -f image-service/Dockerfile \
          --build-arg JAR_FILE=${{ secrets.JAR_FILE }} \
          --build-arg PORT=${{ secrets.DOCKERFILE_PORT }} \
          -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:${{ secrets.DOCKER_HUB_IMAGE_SERVICE_TAG }} \
          ./image-service

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:${{ secrets.DOCKER_HUB_IMAGE_SERVICE_TAG }}

      - name: Deploy on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_SERVER_HOST }}
          username: ec2-user
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          script: |
            echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | sudo docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
            sudo docker stop image-service || true
            sudo docker rm image-service || true
            
            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:${{ secrets.DOCKER_HUB_IMAGE_SERVICE_TAG }}
            sudo docker run -d \
              --name image-service \
              --network=beomstory_network \
              -p ${{ secrets.IMAGE_SERVICE_PORT }}:${{ secrets.DOCKERFILE_PORT }}  \
              -e SPRING_APPLICATION_NAME=image-service \
              -e EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE=http://discovery-service:8761/eureka/ \
              -e EUREKA_CLIENT_REGISTER_WITH_EUREKA=true \
              -e EUREKA_CLIENT_FETCH_REGISTRY=true \
              -e AWS_S3_ACCESSKEY=${{ secrets.AWS_S3_ACCESSKEY }} \
              -e AWS_S3_SECRETKEY=${{ secrets.AWS_S3_SECRETKEY }} \
              -e AWS_S3_REGION=${{ secrets.AWS_S3_REGION }} \
              -e AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }} \
              -e KAFKA_BOOTSTRAP_SERVERS=${{ secrets.NCP_SERVER_HOST }}:9092 \
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:${{ secrets.DOCKER_HUB_IMAGE_SERVICE_TAG }} 
            sudo docker image prune -f
